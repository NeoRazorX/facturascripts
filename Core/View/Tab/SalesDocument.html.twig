{% set model = fsc.getCurrentView().model %}

<style>
    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }
</style>

<script type="module">
    import EditDocumentForm from "{{ asset('Core/Assets/JS/EditDocumentForm.js') }}";

    const URL = '{{ fsc.url() }}';
    const ajaxForm = new EditDocumentForm('salesForm', URL);

    let requestQueueCounter = 0;

    window.salesFastLine = function (e) {
        if (e.which == 13) {
            ajaxForm.baseFormAction('fast-line', '0');
        }
    }

    window.salesFormAction = function (action, selectedLine) {
        ajaxForm.baseFormAction(action, selectedLine);
    }

    window.salesFormActionWait = async function (action, selectedLine) {
        animateSpinner('add');

        // usamos un contador y un temporizador para solamente procesar la Ãºltima llamada
        requestQueueCounter++;
        let currentRequestNumber = requestQueueCounter;

        await new Promise(r => setTimeout(r, 300));
        if (currentRequestNumber < requestQueueCounter) {
            return false;
        }

        console.log('Current request queue:', currentRequestNumber)
        return ajaxForm.baseFormAction(action, selectedLine);
    }

    window.salesFormSave = function (action, selectedLine) {
        ajaxForm.baseFormRequest(action, selectedLine)
            .then(function (data) {
                console.log('Response data:', data);
                if (Array.isArray(data.messages)) {
                    data.messages.forEach(item => alert(item.message));
                }
                if (data.ok) {
                    window.location.replace(data.newurl);
                }
            });

        return false;
    }

    window.salesLineTotalWithTaxes = function (id) {
        const total = parseFloat(prompt('{{ i18n.trans('total-with-taxes') }}').replace(',', '.')) || 0;

        ajaxForm.baseLineTotalWithTaxes(id, total);
    }

    {% if model.editable %}
    let sortable = false;

    $(document).on('click', '#sortableBtn', function () {
        if (sortable) {
            ajaxForm.sortableDisable('#salesFormLines');
            sortable = false;
            $(this).removeClass('btn-secondary').addClass('btn-light');
        } else {
            ajaxForm.sortableEnable('#salesFormLines');
            sortable = true;
            $(this).removeClass('btn-light').addClass('btn-secondary');
        }
    });
    {% endif %}

    $(document).ready(function () {
        $("#findCustomerInput").autocomplete({
            autoFocus: true,
            source: function (request, response) {
                $.ajax({
                    method: "POST",
                    url: URL,
                    data: {action: 'find-customer', term: request.term},
                    dataType: "json",
                    success: function (results) {
                        response(results);
                    },
                    error: function (msg) {
                        alert(msg.status + " " + msg.responseText);
                    }
                });
            },
            select: function (event, ui) {
                if (ui.item.key !== null) {
                    const value = ui.item.value.split(" | ");
                    if (value.length > 1) {
                        document.forms['salesForm']['codcliente'].value = value[0];
                        ui.item.value = value[1];
                    }
                    $("#findCustomerModal").modal("hide");
                    salesFormAction("set-customer", "0");
                }
            },
            open: function (event, ui) {
                $(this).autocomplete('widget').css('z-index', 1500);
                return false;
            }
        });
    });
</script>

<form name="salesForm" method="post">
    <input type="hidden" name="action"/>
    <input type="hidden" name="code" value="{{ model.primaryColumnValue() }}"/>
    <input type="hidden" name="multireqtoken" value="{{ fsc.multiRequestProtection.newToken() }}"/>
    <input type="hidden" name="selectedLine"/>
    {{ fsc.renderSalesForm(model, model.getLines()) | raw }}
</form>
