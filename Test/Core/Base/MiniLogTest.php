<?php
namespace FacturaScripts\Core\Base;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-21 at 11:14:25.
 */
class MiniLogTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var MiniLog
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new MiniLog();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::emergency
     */
    public function testEmergency()
    {
        $level = ['emergency'];
        $this->object->clear();
        $this->object->emergency('emergency');
        $data = $this->object->read($level);

        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'emergency');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::alert
     */
    public function testAlert()
    {
        $level = ['alert'];
        $this->object->clear();
        $this->object->alert('alert');
        $data = $this->object->read($level);

        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'alert');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::critical
     */
    public function testCritical()
    {
        $level = ['critical'];
        $this->object->clear();
        $this->object->critical('critical');
        $data = $this->object->read($level);

        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'critical');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::error
     */
    public function testError()
    {
        $level = ['error'];
        $this->object->clear();
        $this->object->error('error');
        $data = $this->object->read($level);

        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'error');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::warning
     */
    public function testWarning()
    {
        $level = ['warning'];
        $this->object->clear();
        $this->object->warning('warning');
        $data = $this->object->read($level);

        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'warning');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::notice
     */
    public function testNotice()
    {
        $level = ['notice'];
        $this->object->clear();
        $this->object->notice('notice');
        $data = $this->object->read($level);

        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'notice');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::info
     */
    public function testInfo()
    {
        $level = ['info'];
        $this->object->clear();
        $this->object->info('info');
        $data = $this->object->read($level);

        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'info');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::debug
     */
    public function testDebug()
    {
        $level = ['debug'];
        $this->object->clear();
        $this->object->debug('debug');
        $data = $this->object->read($level);

        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'debug');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::sql
     */
    public function testSql()
    {
        $level = ['sql'];
        $this->object->clear();
        $this->object->sql('sql');
        $data = $this->object->read($level);

        $this->assertEquals(1, count($data));
        $this->assertEquals($data[0]['level'], $level[0]);
        $this->assertEquals($data[0]['message'], 'sql');
        $this->assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::log
     */
    public function testLog()
    {
        
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::read
     */
    public function testRead()
    {
        
    }

    public function testClear()
    {
        $this->object->sql('sql');
        $this->object->clear();
        $this->assertEmpty($this->object->read());
    }
}
