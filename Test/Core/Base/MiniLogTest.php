<?php
/**
 * This file is part of FacturaScripts
 * Copyright (C) 2017-2018 Carlos Garcia Gomez <carlos@facturascripts.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
namespace FacturaScripts\Test\Core\Base;

use FacturaScripts\Core\Base\MiniLog;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-21 at 11:14:25.
 */
class MiniLogTest extends TestCase
{

    /**
     * @var MiniLog
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new MiniLog();
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::emergency()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testEmergency()
    {
        $level = ['emergency'];
        $this->object->clear();
        $this->object->emergency('emergency');
        $data = $this->object->read($level);

        self::assertEquals(1, count($data));
        self::assertEquals($data[0]['level'], $level[0]);
        self::assertEquals($data[0]['message'], 'emergency');
        self::assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::alert()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testAlert()
    {
        $level = ['alert'];
        $this->object->clear();
        $this->object->alert('alert');
        $data = $this->object->read($level);

        self::assertEquals(1, count($data));
        self::assertEquals($data[0]['level'], $level[0]);
        self::assertEquals($data[0]['message'], 'alert');
        self::assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::critical()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testCritical()
    {
        $level = ['critical'];
        $this->object->clear();
        $this->object->critical('critical');
        $data = $this->object->read($level);

        self::assertEquals(1, count($data));
        self::assertEquals($data[0]['level'], $level[0]);
        self::assertEquals($data[0]['message'], 'critical');
        self::assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::error()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testError()
    {
        $level = ['error'];
        $this->object->clear();
        $this->object->error('error');
        $data = $this->object->read($level);

        self::assertEquals(1, count($data));
        self::assertEquals($data[0]['level'], $level[0]);
        self::assertEquals($data[0]['message'], 'error');
        self::assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::warning()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testWarning()
    {
        $level = ['warning'];
        $this->object->clear();
        $this->object->warning('warning');
        $data = $this->object->read($level);

        self::assertEquals(1, count($data));
        self::assertEquals($data[0]['level'], $level[0]);
        self::assertEquals($data[0]['message'], 'warning');
        self::assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::notice()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testNotice()
    {
        $level = ['notice'];
        $this->object->clear();
        $this->object->notice('notice');
        $data = $this->object->read($level);

        self::assertEquals(1, count($data));
        self::assertEquals($data[0]['level'], $level[0]);
        self::assertEquals($data[0]['message'], 'notice');
        self::assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::info()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testInfo()
    {
        $level = ['info'];
        $this->object->clear();
        $this->object->info('info');
        $data = $this->object->read($level);

        self::assertEquals(1, count($data));
        self::assertEquals($data[0]['level'], $level[0]);
        self::assertEquals($data[0]['message'], 'info');
        self::assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::debug()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testDebug()
    {
        $level = ['debug'];
        $this->object->clear();
        $this->object->debug('debug');
        $data = $this->object->read($level);

        self::assertEquals(1, count($data));
        self::assertEquals($data[0]['level'], $level[0]);
        self::assertEquals($data[0]['message'], 'debug');
        self::assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::sql()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testSql()
    {
        $level = ['sql'];
        $this->object->clear();
        $this->object->sql('sql');
        $data = $this->object->read($level);

        self::assertEquals(1, count($data));
        self::assertEquals($data[0]['level'], $level[0]);
        self::assertEquals($data[0]['message'], 'sql');
        self::assertEmpty($data[0]['context']);
    }

    /**
     * @covers \FacturaScripts\Core\Base\MiniLog::sql()
     * @covers \FacturaScripts\Core\Base\MiniLog::clear()
     * @covers \FacturaScripts\Core\Base\MiniLog::read()
     */
    public function testClear()
    {
        $this->object->sql('sql');
        $this->object->clear();
        self::assertEmpty($this->object->read());
    }
}
